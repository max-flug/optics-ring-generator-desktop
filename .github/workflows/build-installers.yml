name: Build Installers

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

env:
  CARGO_TERM_COLOR: always

jobs:
  build-installers:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: ''
            target: 'aarch64-apple-darwin'
            name: 'macOS (Apple Silicon)'
            artifact: 'macos-aarch64'
          - platform: 'macos-latest' 
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            name: 'macOS (Intel)'
            artifact: 'macos-x86_64'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'
            name: 'Windows (x64)'
            artifact: 'windows-x64'

    runs-on: ${{ matrix.platform }}
    name: Build ${{ matrix.name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          workspaces: src-tauri

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Build application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}

      - name: Upload macOS artifacts
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app
          retention-days: 30

      - name: Upload Windows artifacts
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe
            src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
          retention-days: 30

  create-release:
    needs: build-installers
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -la ./artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/**/*.dmg
            ./artifacts/**/*.exe
            ./artifacts/**/*.msi
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## ðŸŽ‰ Optics Ring Generator Professional

            ### Download Installers:
            
            **macOS:**
            - Apple Silicon (M1/M2/M3): `*_aarch64.dmg`
            - Intel: `*_x86_64.dmg`
            
            **Windows:**
            - Windows 10/11 (64-bit): `*.exe` or `*.msi`
            
            ### Installation:
            - **macOS**: Double-click DMG, drag to Applications
            - **Windows**: Run the EXE installer as administrator
            
            ### Features:
            - âœ… Professional 3D ring generator
            - âœ… Three ring types (Convex, Concave, Three-Point)
            - âœ… Real-time 3D preview
            - âœ… STL export for 3D printing
            - âœ… All dependencies included
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-universal-macos:
    runs-on: macos-latest
    name: Build macOS Universal Binary
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin,x86_64-apple-darwin

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: universal-apple-darwin
          workspaces: src-tauri

      - name: Build Universal Binary
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: --target universal-apple-darwin

      - name: Upload Universal macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal
          path: |
            src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/universal-apple-darwin/release/bundle/macos/*.app
          retention-days: 30
